///! Common library code for clients and servers that run code
///! Communication takes place over gRPC

/// Runner module, code is generated by tonic based on the runner proto file
pub mod runner {
    pub const RUNNER_PORT: &str = "50051";
    use tonic::transport::Channel;

    use self::runner_client::RunnerClient;

    tonic::include_proto!("runner");

    #[derive(Debug)]
    pub struct SharedRunnerClient {
        pub client: RunnerClient<Channel>
    }

    impl RunnerClient<Channel> {
        pub async fn new_host_port(host: String, port: String) -> RunnerClient<Channel> {
            RunnerClient::connect(format!("http://{}:{}", host, port)).await.unwrap()
        }
    }

    impl SharedRunnerClient {
        /// Creates a new instance with default client options
        pub async fn new() -> SharedRunnerClient {
            SharedRunnerClient {
                client: RunnerClient::connect(format!("http://{}:{}", "localhost", RUNNER_PORT)).await.unwrap()
            }
        }
        
        /// Gets a client to work with
        pub fn get(&self) -> RunnerClient<Channel> {
            // Cloning the tonic client / channel is low cost, see
            // https://docs.rs/tonic/latest/tonic/transport/struct.Channel.html#multiplexing-requests
            self.client.clone()
        }
    }   
}

pub mod controller {
    tonic::include_proto!("controller");
    pub const CONTROLLER_PORT: &str = "50000";
}

/// Re-export tonic because I am lazy and don't want to 
/// include it as a package everywhere
pub use tonic as tonic;